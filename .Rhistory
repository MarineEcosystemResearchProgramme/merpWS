comadre$metadata
class(comadre$metadata)
head(comadre$metadata)
library(reshape)
install.packages('ReadImages')
library(imager)
toInstall <- c("imager", "reshape", "ggplot2")
lapply(toInstall, library, character.only = TRUE)
allImageURLs <- c("http://media.charlesleifer.com/blog/photos/thumbnails/akira_940x700.jpg",
"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/402px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg",
"http://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Official_portrait_of_Barack_Obama.jpg/441px-Official_portrait_of_Barack_Obama.jpg",
"http://cache.boston.com/universal/site_graphics/blogs/bigpicture/obama_11_05/obama22_16604051.jpg",
"http://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/758px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg",
"http://www.10mfh.com/wp-content/uploads/2011/09/dino_riders.jpg",
"http://images3.alphacoders.com/855/8557.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/ngm_101912/bp19.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/ngm_101912/bp26.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/ngm_101912/bp35.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/balloon/bp6.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/smithsonian_030512/bp14.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/smithsonian_030512/bp15.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/earth_day_2012/bp6.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/2011part2/bp1.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/2011part2/bp4.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/2011part2/bp15.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/2011part2/bp27.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/natural_world_2011/bp40.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/ngmphotocontest_111811/bp10.jpg",
"http://inapcache.boston.com/universal/site_graphics/blogs/bigpicture/ngmphotocontest_111811/bp54.jpg")
url <- "http://media.charlesleifer.com/blog/photos/thumbnails/akira_940x700.jpg"
download.file(url, "tempPicture.jpg", mode = "wb")  # Stash image locally
url <- "http://ovicio.com.br/wp-content/uploads/akira-original.jpg"
download.file(url, "tempPicture.jpg", mode = "wb")  # Stash image locally
load.jpeg("tempPicture.jpg")
load.image("tempPicture.jpg")
ls
ls()
url
?load.image
readImage <- load.image("tempPicture.jpg")
rgbImage <- reshape(longImage, timevar = "X3",
idvar = c("X1", "X2"), direction = "wide")
rgbImage$X1 <- -rgbImage$X1
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
longImage <- melt(readImage)
?melt
readImage %>%
as.data.frame() -> df
head(df)
df %>%
sample_n(n, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> mydata
library(imager)
library(dplyr)
library(deldir)
library(ggplot2)
library(scales)
df %>%
sample_n(n, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> mydata
df %>%
sample_n(500, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> mydata
df %>%
as.data.frame() %>%
group_by() %>%
summarize(xmin=min(x), xmax=max(x), ymin=min(y), ymax=max(y)) %>%
as.vector()->rw
df %>%
sample_n(500, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> mydata
mydata %>%
mutate(long=sqrt((x1-x2)^2+(y1-y2)^2),
alpha=findInterval(long, quantile(long, probs = seq(0, 1, length.out = 20)))/21)-> mydata
mydata %>%
ggplot(aes(alpha=(1-alpha))) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), color="black", lwd=1) +
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0), trans=reverse_trans())+
theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())-> myplot
myplot
head(df)
nRegions <- 100  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(df, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
voronoiMeans$centers
voronoiMeans$cluster
length(voronoiMeans$centers)
range(voronoiMeans$cluster)
dim(voronoiMeans$centers)
names(readImage)
class(readImage)
?load.image
library(jpeg)
readImage <- readJPEG("tempPicture.jpg")
class(readImage)
dim(readImage)
names(readImage)
?readJPEG
readImage[1, 1, 1]
readImage[1, 1, 3]
plot(readImage)
readImage %>%
as.data.frame() -> df
longImage <- melt(readImage)
dim(longImage)
head(longImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
head(rgbImage)
rgbImage$X1 <- -rgbImage$X1
nRegions <- 100  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(df, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
with(rgbImage, plot(x, y, col = rgb(voronoiColor), asp = 1, pch = "."))
voronoiColor
with(rgbImage, plot(X1, X2, col = rgb(voronoiColor), asp = 1, pch = "."))
class(voronoiColor)
dim(voronoiColor)
head(voronoiColor)
?rgb
length(rgb(voronoiColor), asp = 1, pch = "."))
length(rgb(voronoiColor), asp = 1, pch = ".")
length(rgb(voronoiColor))
dim(rgbImage)
nRegions <- 100  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
with(rgbImage, plot(X1, X2, col = rgb(voronoiColor), asp = 1, pch = "."))
nRegions <- 500  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
with(rgbImage, plot(X1, X2, col = rgb(voronoiColor), asp = 1, pch = "."))
nRegions <- 1000  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
with(rgbImage, plot(X1, X2, col = rgb(voronoiColor), asp = 1, pch = "."))
nRegions <- 5000  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
with(rgbImage, plot(X1, X2, col = rgb(voronoiColor), asp = 1, pch = "."))
ggplot(rgbImage) + geom_point(aes(X1, X2, col = rgb(voronoiColor)))
ggplot(rgbImage) + geom_point(aes(X1, X2, col = rgb(voronoiColor))) + theme(legend.position = "none")
dim(rgbImage)
mycol <- rgb(voronoiColor)
length(mycol)
longImage <- melt(readImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
# rgbImage$X1 <- -rgbImage$X1
nRegions <- 5000  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
ggplot(rgbImage) + geom_point(aes(X1, X2, col = mycol)) + theme(legend.position = "none")
load('~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/COMADRE_v.2.0.1.RData')
head(comadre$metadata)
meta <- comadre$metadata
meta[meta$SpeciesAccepted == "Halichoerus_grypus",]
spe_list <- c("Halichoerus grypus","Phoca vitulina","Balaenoptera acutorostrata",
"Phocoena phocoena","Delphinus delphis","Lagenorhynchus albirostris","Tursiops truncatus")
meta[meta$SpeciesAccepted == "Phoca_vitulina",]
meta[meta$SpeciesAccepted == "Balaenoptera_acutorostrata",]
meta[meta$SpeciesAccepted == "Phocoena_phocoena",]
meta[meta$SpeciesAccepted == "Delphinus_delphis",]
meta[meta$SpeciesAccepted == "Lagenorhynchus_albirostris",]
meta[meta$SpeciesAccepted == "Tursiops_truncatus",]
grep(meta$SpeciesAccepted, pattern = "Tursiops")
grep(meta$SpeciesAuthor, pattern = "Tursiops")
meta[meta$SpeciesAccepted == "Calonectris_diomedea",]
meta[meta$SpeciesAccepted == "Oceanodroma_leucorhoa",]
meta[meta$SpeciesAccepted == "Puffinus_puffinus",]
meta[meta$SpeciesAccepted == "Phalacrocorax_carbo",]
meta[meta$SpeciesAccepted == "Phalacrocorax_aristotelis",]
meta[meta$SpeciesAccepted == "Larus_atricilla",]
meta[meta$SpeciesAccepted == "Larus_argentatus",]
body_sizes$scientificName
body_sizes <- read.csv("~/Google Drive/UK Marine Species/uk_valid_marine_sp_body_size_v2016_05_13.csv")
which(body_sizes$scientificName == "Callinectes sapidus")
body_sizes[which(body_sizes$scientificName == "Callinectes sapidus"),]
statement = 2 < 3
statement
rm(statement)
rm(list = ls())
library(imager)
library(dplyr)
library(deldir)
library(ggplot2)
library(reshape)
library(scales)
url <- "http://ovicio.com.br/wp-content/uploads/akira-original.jpg"
download.file(url, "tempPicture.jpg", mode = "wb")  # Stash image locally
# load.image("~/Desktop/ethel.jpg") %>% grayscale() -> x
readImage <- readJPEG("tempPicture.jpg")
library(jpeg)
url <- "http://ovicio.com.br/wp-content/uploads/akira-original.jpg"
download.file(url, "tempPicture.jpg", mode = "wb")  # Stash image locally
# load.image("~/Desktop/ethel.jpg") %>% grayscale() -> x
readImage <- readJPEG("tempPicture.jpg")
dim(readImage)
longImage <- melt(readImage)
dim(longImage)
head(longImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
head(rgbImage)
table(longImage$X3)
?reshape
nRegions <- 500  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
ggplot(rgbImage) + geom_point(aes(X1, X2, col = mycol)) + theme(legend.position = "none")
rgbImage$X1 <- (-rgbImage$X1)
nRegions <- 500  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
ggplot(rgbImage) + geom_point(aes(X1, X2, col = mycol)) + theme(legend.position = "none")
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
rgbImage$X2 <- (-rgbImage$X2)
nRegions <- 500  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
ggplot(rgbImage) + geom_point(aes(X1, X2, col = mycol)) + theme(legend.position = "none")
longImage <- melt(readImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
rgbImage$X1 <- (-rgbImage$X1)
nRegions <- 500  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
with(rgbImage, plot(X2, X1, col = rgb(voronoiColor), asp = 1, pch = "."))
quartz();ggplot(rgbImage) + geom_point(aes(X2, X1, col = mycol)) + theme(legend.position = "none")
ggplot(rgbImage) + geom_point(aes(X2, X1), col = mycol) + theme(legend.position = "none")
readImage <- readJPEG("~/Desktop/ethel3.jpg")
# the planes are interpreted in the sequence red green blue
# readImage %>%
#   as.data.frame() -> df
longImage <- melt(readImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
rgbImage$X1 <- (-rgbImage$X1)
nRegions <- 500  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
ggplot(rgbImage) + geom_point(aes(X2, X1), col = mycol) + theme(legend.position = "none")
nRegions <- 1000  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
# with(rgbImage, plot(X2, X1, col = rgb(voronoiColor), asp = 1, pch = "."))
ggplot(rgbImage) + geom_point(aes(X2, X1), col = mycol) + theme(legend.position = "none")
voronoiMeans
table(voronoiMeans$cluster)
table(voronoiMeans$centers)
length(voronoiMeans$centers)
nRegions <- 2500  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
# with(rgbImage, plot(X2, X1, col = rgb(voronoiColor), asp = 1, pch = "."))
ggplot(rgbImage) + geom_point(aes(X2, X1), col = mycol) + theme(legend.position = "none")
nRegions <- 100  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
rm(voronoiMeans)
nRegions <- 100  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
readImage <- readJPEG("~/Desktop/ethel3.jpg")
# the planes are interpreted in the sequence red green blue
# readImage %>%
#   as.data.frame() -> df
longImage <- melt(readImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
rgbImage$X1 <- (-rgbImage$X1)
nRegions <- 100  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
# with(rgbImage, plot(X2, X1, col = rgb(voronoiColor), asp = 1, pch = "."))
ggplot(rgbImage) + geom_point(aes(X2, X1), col = mycol) + theme(legend.position = "none")
readImage <- readJPEG("~/Desktop/ethel3.jpg")
# the planes are interpreted in the sequence red green blue
# readImage %>%
#   as.data.frame() -> df
longImage <- melt(readImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
rgbImage$X1 <- (-rgbImage$X1)
nRegions <- 1000  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
# with(rgbImage, plot(X2, X1, col = rgb(voronoiColor), asp = 1, pch = "."))
ggplot(rgbImage) + geom_point(aes(X2, X1), col = mycol) + theme(legend.position = "none")
readImage <- readJPEG("~/Desktop/rockyshore2.jpg")
# the planes are interpreted in the sequence red green blue
# readImage %>%
#   as.data.frame() -> df
longImage <- melt(readImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
rgbImage$X1 <- (-rgbImage$X1)
nRegions <- 2000  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
# with(rgbImage, plot(X2, X1, col = rgb(voronoiColor), asp = 1, pch = "."))
quartz();ggplot(rgbImage) + geom_point(aes(X2, X1), col = mycol) + theme(legend.position = "none")
readImage <- readJPEG("~/Desktop/rockyshore1.jpg")
# the planes are interpreted in the sequence red green blue
# readImage %>%
#   as.data.frame() -> df
longImage <- melt(readImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
rgbImage$X1 <- (-rgbImage$X1)
nRegions <- 5000  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
# with(rgbImage, plot(X2, X1, col = rgb(voronoiColor), asp = 1, pch = "."))
quartz(height = 5, width = 8);ggplot(rgbImage) + geom_point(aes(X2, X1), col = mycol) + theme(legend.position = "none")
readImage <- readJPEG("~/Desktop/rockyshore3.jpg")
# the planes are interpreted in the sequence red green blue
# readImage %>%
#   as.data.frame() -> df
longImage <- melt(readImage)
rgbImage <- reshape(longImage, timevar = "X3", idvar = c("X1", "X2"), direction = "wide")
rgbImage$X1 <- (-rgbImage$X1)
nRegions <- 5000  # Number of voronoi regions, large numbers are slow.
voronoiMeans <- kmeans(rgbImage, centers = nRegions, iter.max = 50)
voronoiColor <- voronoiMeans$centers[voronoiMeans$cluster, 3:5]
# use ggplot here?
mycol <- rgb(voronoiColor)
rgbImage$mycol <- mycol
# with(rgbImage, plot(X2, X1, col = rgb(voronoiColor), asp = 1, pch = "."))
quartz(height = 8, width = 5);ggplot(rgbImage) + geom_point(aes(X2, X1), col = mycol) + theme(legend.position = "none")
paste(c(1,1,2,3,4), sep = ",")
paste0(c(1,1,2,3,4), sep = ",")
paste0(c(1,1,2,3,4), sep = ",", collapse = "")
paste0(c(1,1,2,3,4), collapse = "")
paste(c(1,1,2,3,4), sep = ",")
paste0(paste(c(1,1,2,3,4), sep = ","), collapse = "")
paste0(paste(c(1,1,2,3,4), sep = ","), collapse = "", sep = ",")
paste0(c(1,1,2,3,4), collapse = "", sep = c(",",",",","))
paste0(c(1,1,2,3,4), collapse = "", sep = c(",",",",",",""))
paste0(c(1,1,2,3,4), collapse = "", sep = c(",",",",",","",""))
paste0(c(1,1,2,3,4), collapse = "", sep = c(",",",",",",",",""))
aphia_id <- c(1,1,2,3,4)
aphia_id <- c(aphia_id, NA)
aphia_id
paste0(aphia_id, ifelse(egf == "", "", ","), egf))
paste0(aphia_id, ifelse(egf == "", "", ","), egf)
paste0(aphia_id, ifelse(sep == "", "", ","), sep)
sapply(aphia_id, function(x) ifelse(!is.na(x), ",", ""))
aphia_id <- paste0(aphia_id, sep = sapply(aphia_id, function(x) ifelse(!is.na(x), ",", "")))
aphia_id
aphia_id <- c(1,1,2,3,4)
aphia_id <- c(aphia_id, "")
aphia_id
sapply(aphia_id, function(x) ifelse(x!="", ",", ""))
paste0(aphia_id, sep = sapply(aphia_id, function(x) ifelse(x!="", ",", "")))
paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
c(rep(",", (length(aphia_id) -  1)), "")
aphia_id <- c(1,1,2,3,4)
paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
aphia_id <- c(107552,107381)
if(length(aphia_id) > 1) aphia_id <- paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
aphia_id
myurl <- paste("http://server1.pml.ac.uk/traitexplorer/traitexplorer.py?querytype=2&aphiaids=", aphia_id, "&format=json", sep = "")
myurl
dat <- suppressWarnings(jsonlite::fromJSON(readLines(myurl)))
dat
dat <- jsonlite::fromJSON(readLines(myurl))
dat
jsonlite::fromJSON(readLines(myurl))
jsonlite::fromJSON(myurl)
pml_trait_explorer <- function(aphia_id = NULL, stat = "mean"){
if(is.null(aphia_id)) stop; print("The function requires a species ID!")
else{
if(length(aphia_id) > 1) aphia_id <- paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
myurl <- paste("http://server1.pml.ac.uk/traitexplorer/traitexplorer.py?querytype=2&aphiaids=", aphia_id, "&format=json", sep = "")
jsonlite::fromJSON(myurl)
}
}
pml_trait_explorer <- function(aphia_id = NULL, stat = "mean"){
if(is.null(aphia_id)) {
print("The function requires a species ID!")
stop
}
else{
if(length(aphia_id) > 1) aphia_id <- paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
myurl <- paste("http://server1.pml.ac.uk/traitexplorer/traitexplorer.py?querytype=2&aphiaids=", aphia_id, "&format=json", sep = "")
jsonlite::fromJSON(myurl)
}
}
pml_trait_explorer("mean")
rm(aphia_id)
pml_trait_explorer("mean")
pml_trait_explorer <- function(aphia_id = NULL, stat = "mean"){
if(is.null(aphia_id)) {
print("The function requires a species ID!")
stop()
}
else{
if(length(aphia_id) > 1) aphia_id <- paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
myurl <- paste("http://server1.pml.ac.uk/traitexplorer/traitexplorer.py?querytype=2&aphiaids=", aphia_id, "&format=json", sep = "")
jsonlite::fromJSON(myurl)
}
}
pml_trait_explorer("mean")
pml_trait_explorer <- function(aphia_id = NULL, stat = "mean"){
if(is.null(aphia_id)) {
print("The function requires a species ID!")
}
else{
if(length(aphia_id) > 1) aphia_id <- paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
myurl <- paste("http://server1.pml.ac.uk/traitexplorer/traitexplorer.py?querytype=2&aphiaids=", aphia_id, "&format=json", sep = "")
jsonlite::fromJSON(myurl)
}
}
pml_trait_explorer("mean")
pml_trait_explorer <- function(aphia_id = NULL, stat = "mean"){
if(is.null(aphia_id)) {
print("The function requires a species ID!")
}
else{
if(length(aphia_id) > 1) aphia_id <- paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
myurl <- paste("http://server1.pml.ac.uk/traitexplorer/traitexplorer.py?querytype=2&aphiaids=", aphia_id, "&format=json", sep = "")
jsonlite::fromJSON(myurl)
}
}
pml_trait_explorer()
pml_trait_explorer(stat = "mean")
aphia_id <- c(107552,107381)
pml_trait_explorer(aphia_id = aphia_id, stat = "distmean")
pml_trait_explorer <- function(aphia_id = NULL, stat = "mean"){
if(is.null(aphia_id)) {
print("The function requires a species ID!")
}
else{
if(length(aphia_id) > 1) aphia_id <- paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
myurl <- paste("http://server1.pml.ac.uk/traitexplorer/traitexplorer.py?querytype=2&aphiaids=", aphia_id,"&statistic=",stat,
"&format=json", sep = "")
jsonlite::fromJSON(myurl)
}
pml_trait_explorer <- function(aphia_id = NULL, stat = "mean"){
if(is.null(aphia_id)) {
print("The function requires a species ID!")
}
else{
if(length(aphia_id) > 1) aphia_id <- paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
myurl <- paste("http://server1.pml.ac.uk/traitexplorer/traitexplorer.py?querytype=2&aphiaids=", aphia_id,"&statistic=",stat,
"&format=json", sep = "")
jsonlite::fromJSON(myurl)
}
}
pml_trait_explorer <- function(aphia_id = NULL, stat = "mean"){
if(is.null(aphia_id)) {
print("The function requires a species ID!")
}
else{
if(length(aphia_id) > 1) aphia_id <- paste0(aphia_id, sep = c(rep(",", (length(aphia_id) -  1)), ""), collapse = "")
myurl <- paste("http://server1.pml.ac.uk/traitexplorer/traitexplorer.py?querytype=2&aphiaids=", aphia_id,"&statistic=",stat,
"&format=json", sep = "")
jsonlite::fromJSON(myurl)
}
}
aphia_id <- c(107552,107381)
pml_trait_explorer(aphia_id = aphia_id, stat = "distmean")
aphia_id <- c(107552,107381)
pml_trait_explorer(aphia_id = aphia_id, stat = "mean")
setwd("/Users/Remi/Google Drive/not_to_share/my_backup/myDocuments/github")
# devtools::create("Rmerp",rstudio=F)
setwd("merpWS")
library(roxygen2)
devtools::document()# this works as long as we are in the right folder for the R package, no need to "point" at the R file. the first sentence is the title of the help file, so keep that in mind
library(devtools)
install_github("MarineEcosystemResearchProgramme/merpWS")
library(merpWS)
?pml_trait_explorer
aphia_id <- c(107552,107381)
pml_trait_explorer(aphia_id = aphia_id, stat = "mean")
